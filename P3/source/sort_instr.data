//R1: comparison loops left to do and total comparisons within little loop (load from memory location 0 then use for STX and decrement after every loop)
//R2: track which memory address we are accessing for comparison and number of small loops
//R3: largest so far
//R4: number to compare
//R5: Holds the value of a subtraction


00000000 //00:		NOP					No operation
10100000 //01:		LDA	R1,#0000		Sets R1 = N
8851FFFF //02:	L1:	ADI R5,R1,-1		R5 = R1 - 1
5300000F //03:		BRR #3,LH			Branch (to halt) if R5 <= 0 (This means there is only 1 or 0 values)
88200002 //04:		ADI R2,R0,2			Initializes R2 = 2 every big loop
10300001 //05:		LDA R3,#0001		Initializes R3 = M[1] every big loop
8811FFFF //06:		ADI R1,R1,-1		Initializes R1 = N-1 and decrements every big loop
18420000 //07:	L2:	LDX R4,R2,#0000		Sets R4 = M[R2] every small loop
80534002 //08:		SUB R5,R3,R4		R5 = R3 - R4
52000007 //09:		BRR #2,L4			Branch to Register swap instruction if R5 < 0
28320000 //0A:		STX R3,R2,#0000		Store R3(bigger value) @ M[R2](compared memory location)
8822FFFF //0B:	L3:	ADI R2,R2,-1		Decrement R2
28420000 //0C:		STX R4,R2,#0000		Store R4(smaller value) @ M[R2 - 1]
80512002 //0D:		SUB R5,R1,R2		R5 = R1 - R2
5300FFF3 //0E:		BRR #2,L1			Branch if R5 == 0
88220002 //0F:		ADI R2,R2,2			R2 = R2 + 2
7000FFF6 //10:		BNR #0,L2			Unconditional branch to L2 (this should only happen if there are still comparisons to be made in the small loop)
30340000 //11:	L4: SWP R3,R4			Swap old largest value with new Largest value
7000FFF8 //12:		BNR #0,L3			Unconditional branch to L3
F0000000 //13:	LH: HLT					Halt